// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("rescript/lib/js/curry.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");

var text = Fs.readFileSync("input/Week2/Year2020Day2.txt", "utf8");

function checkArray(arr, $$char) {
  var a = arr;
  var match = Belt_Array.keep(a, (function (x) {
          return x === Caml_array.get($$char, 0);
        })).length;
  if (match !== 1) {
    return 0;
  } else {
    return 1;
  }
}

function checkPoint(arr) {
  if (arr.length !== 3) {
    return 0;
  }
  var match = arr[0];
  if (match.length !== 2) {
    return 0;
  }
  var min = match[0];
  var max = match[1];
  var $$char = arr[1];
  var array = arr[2];
  return checkArray(Belt_Array.keepWithIndex(array, (function (_x, i) {
                    if ((i + 1 | 0) === Belt_Int.fromString(min)) {
                      return true;
                    } else {
                      return (i + 1 | 0) === Belt_Int.fromString(max);
                    }
                  })), $$char);
}

function countArray(arr, min, max) {
  var a = arr;
  if (Caml_obj.caml_greaterequal(a.length, Belt_Int.fromString(min)) && Caml_obj.caml_lessequal(a.length, Belt_Int.fromString(max))) {
    return 1;
  } else {
    return 0;
  }
}

function checkSame(arr) {
  if (arr.length !== 3) {
    return 0;
  }
  var match = arr[0];
  if (match.length !== 2) {
    return 0;
  }
  var min = match[0];
  var max = match[1];
  var $$char = arr[1];
  var array = arr[2];
  return countArray(Belt_Array.keep(array, (function (x) {
                    return x === Caml_array.get($$char, 0);
                  })), min, max);
}

function answer(bool_arr) {
  return Belt_Array.reduce(bool_arr, 0, (function (total, curr) {
                return total + curr | 0;
              }));
}

function splitArray(arr) {
  return Belt_Array.mapWithIndex(arr, (function (i, x) {
                if (i !== 0) {
                  return x.split("");
                } else {
                  return x.split("-");
                }
              }));
}

function makeArray(str) {
  return Belt_Array.map(str.split("\n"), (function (s) {
                return s.replace(":", "").split(" ");
              }));
}

function program(input, f) {
  return answer(Belt_Array.map(Belt_Array.map(makeArray(input), splitArray), Curry.__1(f)));
}

function part1(input) {
  console.log(program(input, checkSame));
  
}

function part2(input) {
  console.log(program(input, checkPoint));
  
}

part1(text);

part2(text);

exports.text = text;
exports.checkArray = checkArray;
exports.checkPoint = checkPoint;
exports.countArray = countArray;
exports.checkSame = checkSame;
exports.answer = answer;
exports.splitArray = splitArray;
exports.makeArray = makeArray;
exports.program = program;
exports.part1 = part1;
exports.part2 = part2;
/* text Not a pure module */
